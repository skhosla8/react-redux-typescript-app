{"version":3,"sources":["state/action-types/index.ts","components/Posts/PostsTile.tsx","components/Posts/Posts.tsx","components/Form/Form.tsx","App.js","state/reducers/formReducer.ts","state/reducers/index.ts","state/store.ts","index.js"],"names":["ActionType","PostsTile","item","className","heading","readOnly","value","summary","Posts","data","useSelector","state","form","formData","tiles","map","i","Fragment","Form","initialState","useState","formState","setFormState","errors","setErrors","dispatch","useDispatch","handleChange","e","target","name","autoComplete","onSubmit","preventDefault","key","currErrors","isValid","validateForm","type","SET_DATA","payload","setTimeout","placeholder","onChange","App","formReducer","action","rootReducer","combineReducers","store","createStore","subscribe","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5be49768.chunk.js","sourcesContent":["export enum ActionType {\n    SET_DATA = \"SET_DATA\",\n};","import React, { FC } from 'react';\nimport { Tile } from '../../state/reducers/formReducer';\n\ninterface IPostsTileProps {\n  item: Tile;\n}\n\nconst PostsTile: FC<IPostsTileProps> = ({ item }) => {\n  return (\n    <li className=\"posts-item-wrapper\">\n      <div className=\"posts-item\">\n        <ul>\n          <li className=\"posts-item-heading\">{item.heading}</li>\n          <li className=\"posts-item-subheading\">{item['sub-heading']}</li>\n          <li className=\"posts-item-summary\">\n            <textarea readOnly value={item.summary}></textarea>\n          </li>\n        </ul>\n      </div>\n    </li>\n  )\n}\n\nexport default PostsTile;","import React, { FC } from 'react';\nimport './styles.css';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../state/reducers';\nimport { Tile } from '../../state/reducers/formReducer';\nimport PostsTile from './PostsTile';\n\nconst Posts: FC = () => {\n  const data: Tile[] = useSelector((state: RootState) => state.form.formData);\n\n  const tiles = data && data.map((item: Tile, i) => (\n    <PostsTile\n      key={i}\n      item={item}\n    />\n  ));\n\n  return (\n    <React.Fragment>\n      <ul className=\"posts\">\n        {tiles}\n      </ul>\n    </React.Fragment>\n  );\n}\n\nexport default Posts;\n\n","import React, { FC, useState } from 'react';\nimport './styles.css';\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Action } from '../../state/actions';\nimport { ActionType } from '../../state/action-types';\n\n// describe shape of form input \nexport interface FormInput {\n  heading?: string;\n  'sub-heading'?: string | number;\n  summary?: string;\n}\n\nconst Form: FC = () => {\n  // use local state for initial user input data since it doesn't need to persist\n  const initialState: FormInput = {\n    heading: '',\n    'sub-heading': '',\n    summary: '',\n  };\n\n  const [formState, setFormState] = useState<FormInput>(initialState); // make form a controlled component\n  const [errors, setErrors] = useState({} as any);\n\n  const dispatch = useDispatch<Dispatch<Action>>();\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement & HTMLTextAreaElement>\n  ): void => {\n    setFormState({\n      ...formState,\n      [e.target.name]: e.target.value // find name attribute for each field, set local state based on field name and value   \n    });\n  };\n\n  const resetForm = (): void => {\n    setFormState({ ...initialState });\n  };\n\n  const validateForm = (): boolean => {\n    let key: keyof FormInput;\n    const currErrors: FormInput = {};\n\n    let isValid = true;\n\n    for (key in formState) {\n      if (!formState[key]) {\n        isValid = false;\n        currErrors[key] = `Please enter a valid ${key}`;\n      }\n    }\n\n    // handle error messages for all text fields\n    if (!isValid) {\n      setErrors({ ...currErrors });\n    } else {\n      setErrors({});\n    }\n\n    return isValid;\n  }\n\n  const handleSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\n    e.preventDefault(); // prevent browser reload since data is not being sent to backend\n\n    const validated = validateForm();\n\n    if (validated) { // if all text fields are filled, proceed with dispatch  \n      dispatch({ type: ActionType.SET_DATA, payload: formState }); // on form submit, store data in Redux store\n\n      setTimeout(() => {\n        resetForm();\n      }, 500);\n    }\n  };\n\n  return (\n    <div className=\"form-wrapper\">\n      <form className=\"msform\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <fieldset className=\"msform-fieldset\">\n          <h2>Create Post</h2>\n          <h3>Fill all required text fields to submit the form</h3>\n          {errors.heading && <p className=\"alert\">{errors.heading}</p>}\n          <input\n            className=\"msform-field\"\n            type=\"text\"\n            name=\"heading\"\n            value={formState.heading}\n            placeholder=\"Heading\"\n            onChange={handleChange}\n          />\n          {errors['sub-heading'] && <p className=\"alert\">{errors['sub-heading']}</p>}\n          <input\n            className=\"msform-field\"\n            type=\"text\"\n            name=\"sub-heading\"\n            value={formState['sub-heading']}\n            placeholder=\"Sub-Heading\"\n            onChange={handleChange}\n          />\n          {errors.summary && <p className=\"alert\">{errors.summary}</p>}\n          <textarea\n            className=\"msform-field\"\n            name=\"summary\"\n            value={formState.summary}\n            placeholder=\"Summary\"\n            onChange={handleChange}\n          />\n          <button type=\"submit\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  )\n}\n\nexport default Form;","import './App.css';\nimport Posts from './components/Posts/Posts';\nimport Form from './components/Form/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"gridContainer\">\n        <div className=\"gridPosts\">\n          <Posts />\n        </div>\n        <div className=\"gridForm\">\n          <Form />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { Action } from '../actions';\nimport { ActionType } from '../action-types';\nimport { FormInput } from '../../components/Form/Form';\n\n// describe shape of incoming form data \nexport type Tile = Readonly<FormInput>;\n\nexport interface FormState {\n    formData: Tile[];\n}\n\nconst initialState = {\n    formData: [],\n};\n\nconst formReducer = (state: FormState = initialState, action: Action) => {\n    switch (action.type) {\n        case ActionType.SET_DATA: {\n            return {\n                ...state,\n                formData: [...state.formData, action.payload],\n            };\n        }\n        default:\n            return state;\n    }\n}\n\nexport default formReducer;","import { combineReducers } from 'redux';\nimport formReducer from './formReducer';\n\nconst rootReducer = combineReducers({\n    form: formReducer\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\nstore.subscribe(() => console.log(store.getState()));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}